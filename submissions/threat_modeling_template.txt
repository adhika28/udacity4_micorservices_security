Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

1. Spoofing 
Can occur when a sidecar container has intentional access to the primary container's
namespace and may spoof the namespace used by the primary container, resulting in isolation tampering.

2. Tampering
An attacker may implant malicious image into the image registry and entice organizations to use it and 
lead to supply chian injections

3. Information Disclosure
The docker client may expose sensitive infromation such as secrets that
are hardcoded in configuration files, or part of the dockerfile itself.

4. Denial of Service
The excessive traffic from the client could overwhelm the daemon, which
is often on the same machine and cause it to crash, leading to a client compromise.

5. Elevation of Priviledge
Due to traffic network spoofing, an attacker can gain access to the host and other containers. 
Unnecessary packages should not be installed in the container.


Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

1. Spoofing
Kubernetes ships with insecure defaults, for example, all pods have `CAP_NET_RAW` permissions. 
This allows all pods to open raw sockets and inject malicious packets into the Kubernetes container network, which may lead to spoofing.

2. Repudiation
Unauthorized changes can be made to kubelet.

3. Denial of Service
Excessive traffic to the kube-apiserver can overwhelm this endpoint.

4. Information Disclosure
Sensitive information may be disclosed via the etcd key value store.

5. Elevation of Priviledge
Several Kubernetes distributions have made the decision that they donâ€™t consider malicious containers part of their threat model.
As such, once an attacker has that level of access then there are minimal controls, by default, stopping them from getting full cluster-admin rights. 
Ensure that all management ports visible oin the cluster network require authentication for all users.

Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).
